package kuplrg

object Implementation extends Template {

  /** This is the playground for you to run your implementation. Do whatever you
    * want here and run `sbt run` to see the result.
    */
  @main def playground: Unit = {
    println("------------------- PLAYGROUND -------------------")

    // You can check your implementation here.
    val accept = tm_an_bn_cn.accept
    println(s"tm_an_bn_cn.accept(\"abc\")    = ${accept("abc")}")
    println(s"tm_an_bn_cn.accept(\"aabbcc\") = ${accept("aabbcc")}")
    println(s"tm_an_bn_cn.accept(\"abcabc\") = ${accept("abcabc")}")
	
    
    tm_fib.dumpPath("")

    println("--------------------------------------------------")
  }

  import HeadMove.*

  // TM accpeting L = { a^n b^n c^n | n ≥ 0 }
  val tm_an_bn_cn: TM = TM(
    states = Set(0, 1, 2, 3, 4, 5),
    symbols = Set('a', 'b', 'c'),
    tapeSymbols = Set('a', 'b', 'c', 'X', 'Y', 'Z', 'B'),
    trans = Map(
      (0, 'a') -> (1, 'X', R),
      (0, 'Y') -> (4, 'Y', R),
      (0, 'B') -> (5, 'B', L),
      (1, 'a') -> (1, 'a', R),
      (1, 'Y') -> (1, 'Y', R),
      (1, 'b') -> (2, 'Y', R),
      (2, 'b') -> (2, 'b', R),
      (2, 'Z') -> (2, 'Z', R),
      (2, 'c') -> (3, 'Z', L),
      (3, 'a') -> (3, 'a', L),
      (3, 'b') -> (3, 'b', L),
      (3, 'Y') -> (3, 'Y', L),
      (3, 'Z') -> (3, 'Z', L),
      (3, 'X') -> (0, 'X', R),
      (4, 'Y') -> (4, 'Y', R),
      (4, 'Z') -> (4, 'Z', R),
      (4, 'B') -> (5, 'B', L),
    ),
    initState = 0,
    blank = 'B',
    finalStates = Set(5),
  )

  // TM accepting L = { a^{n^2} | n ≥ 0 }
  def tm_square: TM = TM(
    states = Set(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32),
    symbols = Set('a'),
    tapeSymbols = Set('a','X','Z','B'),
    trans = Map(
      (0, 'a') -> (1,'X',R),
      (1, 'a') -> (1,'a',R),
      (1, 'B') -> (2,'B',L),
      (2, 'a') -> (2,'a',L),
      (2, 'X') -> (3,'Z',R),
      (3, 'X') -> (4,'X',R),
      (4, 'X') -> (4,'X',R),
      (4, 'a') -> (5,'a',R),
      (5, 'a') -> (5,'a',R),
      (5, 'X') -> (6,'X',L),
      (5, 'Z') -> (6,'Z',L),
      (5, 'B') -> (6,'B',L),
      (6, 'a') -> (7,'X',L),
      (7, 'a') -> (7,'a',L),
      (7, 'X') -> (27,'X',L),
      (3, 'a') -> (8,'a',R),
      (8, 'a') -> (8,'a',R),
      (8, 'X') -> (9,'X',L),
      (8, 'Z') -> (9,'Z',L),
      (8, 'B') -> (9,'B',L),
      (9, 'a') -> (10,'X',L),
      (10, 'a') -> (11,'X',L),
      (11, 'a') -> (12,'X',L),
      (12, 'Z') -> (13,'Z',L),
      (13, 'X') -> (13,'X',L),
      (13, 'Z') -> (13,'Z',L),
      (13, 'B') -> (14,'B',R),
      (12, 'a') -> (15,'a',R),
      (15, 'X') -> (15,'X',R),
      (15, 'Z') -> (16,'Z',L),
      (15, 'B') -> (16,'B',L),
      (16, 'X') -> (17,'Z',L),
      (17, 'X') -> (18,'X',L),
      (18, 'X') -> (18,'X',L),
      (18, 'a') -> (19,'a',L),
      (19, 'a') -> (19,'a',L),
      (19, 'X') -> (20,'X',R),
      (19, 'Z') -> (20,'Z',R),
      (19, 'B') -> (20,'B',R),
      (20, 'a') -> (21,'X',R),
      (21, 'a') -> (21,'a',R),
      (21, 'X') -> (15,'X',R),
      (17, 'a') -> (22,'a',L),
      (22, 'a') -> (22,'a',L),
      (22, 'X') -> (23,'X',R),
      (23, 'a') -> (24,'X',R),
      (24, 'a') -> (25,'X',R),
      (25, 'a') -> (26,'X',R),
      (26, 'a') -> (27,'a',L),
      (27, 'X') -> (27,'X',L),
      (27, 'Z') -> (2,'Z',R),
      (27, 'B') -> (2,'B',R),
      (26, 'Z') -> (28,'Z',R),
      (28, 'X') -> (28,'X',L),
      (28, 'Z') -> (28,'Z',L),
      (28, 'B') -> (29,'B',R),
      (0, 'B') -> (30,'B',R),
      (30, 'B') -> (31,'B',L),
      (3, 'B') -> (32,'B',L),
    ),
    initState = 0,
    blank = 'B',
    finalStates = Set(14,29,31,32),
  )

  // TM accepting L = { a^n | n is a fibonacci number }
  def tm_fib: TM = TM(
    states = Set(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48),
    symbols = Set('a'),
    tapeSymbols = Set('a','X','L','R','Z','B'),
    trans = Map(  
      (0, 'B') -> (45,'B',R),
      (0, 'a') -> (46,'a',R),
      (46, 'B') -> (48,'B',R),
      (46, 'a') -> (47,'a',L),
      (47, 'a') -> (1,'a',L),
      (1, 'B') -> (2,'B',L),
      (2, 'B') -> (3,'L',R),
      (3, 'B') -> (4,'B',R),
      (4, 'a') -> (4,'a',R),
      (4, 'B') -> (5,'B',R),
      (5, 'B') -> (6,'R',L),
      (6, 'B') -> (7,'B',L),
      (7, 'a') -> (7,'a',L),
      (7, 'B') -> (8,'B',L),
      (8, 'L') -> (8,'L',L),
      (8, 'B') -> (9,'B',R),
      (8, 'Z') -> (9,'Z',R),
      (9, 'L') -> (10,'Z',R),
      (10, 'L') -> (10,'L',R),
      (10, 'B') -> (11,'B',R),
      (11, 'X') -> (11,'X',R),
      (11, 'a') -> (12,'X',L),
      (12, 'X') -> (12,'X',L),
      (12, 'B') -> (13,'B',L),
      (13, 'L') -> (8,'L',L),
      (13, 'Z') -> (14,'Z',R),
      (14, 'B') -> (15,'B',R),
      (15, 'a') -> (15,'a',R),
      (15, 'X') -> (15,'X',R),
      (15, 'B') -> (16,'B',R),
      (16, 'R') -> (16,'R',R),
      (16, 'B') -> (17,'B',L),
      (16, 'Z') -> (17,'Z',L),
      (17, 'R') -> (18,'Z',L),
      (18, 'R') -> (18,'R',L),
      (18, 'B') -> (19,'B',L),
      (19, 'X') -> (19,'X',L),
      (19, 'a') -> (20,'X',R),
      (20, 'X') -> (20,'X',R),
      (20, 'B') -> (21,'B',R),
      (21, 'R') -> (16,'R',R),
      (21, 'Z') -> (22,'Z',L),
      (22, 'B') -> (23,'B',L),
      (23, 'a') -> (23,'a',L),
      (23, 'X') -> (23,'X',L),
      (23, 'B') -> (24,'B',R),
      (24, 'X') -> (25,'X',R),
      (25, 'X') -> (25,'X',R),
      (25, 'a') -> (26,'a',L),
      (26, 'a') -> (26,'a',L),
      (26, 'X') -> (26,'X',L),
      (26, 'B') -> (27,'B',R),
      (27, 'a') -> (27,'a',R),
      (27, 'X') -> (27,'X',R),
      (27, 'B') -> (28,'B',R),
      (28, 'Z') -> (29,'Z',R),
      (29, 'Z') -> (29,'Z',R),
      (29, 'B') -> (30,'B',L),
      (29, 'R') -> (30,'R',L),
      (30, 'Z') -> (31,'R',L),
      (31, 'Z') -> (31,'Z',L),
      (31, 'B') -> (32,'B',L),
      (32, 'a') -> (32,'a',L),
      (32, 'X') -> (32,'X',L),
      (32, 'B') -> (33,'B',L),
      (33, 'L') -> (33,'L',L),
      (33, 'Z') -> (34,'L',R),
      (33, 'B') -> (34,'L',R),
      (34, 'L') -> (34,'L',R),
      (34, 'B') -> (27,'B',R),  
      (28, 'R') -> (35,'R',L),
      (35, 'B') -> (36,'B',L),
      (36, 'a') -> (36,'a',L),
      (36, 'X') -> (37,'a',R),
      (37, 'a') -> (37,'a',R),
      (37, 'B') -> (38,'B',R),
      (38, 'Z') -> (38,'Z',R),
      (38, 'R') -> (39,'Z',L),
      (38, 'B') -> (39,'Z',L),
      (39, 'Z') -> (39,'Z',L),
      (39, 'B') -> (36,'B',L),
      (36, 'B') -> (40,'B',R),
      (40, 'a') -> (40,'a',R),
      (40, 'B') -> (41,'B',R),
      (41, 'Z') -> (41,'R',R),
      (41, 'B') -> (42,'B',L),
      (42, 'R') -> (42,'R',L),
      (42, 'B') -> (43,'B',L),
      (43, 'a') -> (43,'a',L),
      (43, 'B') -> (8,'B',L),
      (25, 'B') -> (44,'B',R),
    ),
    initState = 0,
    blank = 'B',
    finalStates = Set(44,45,48),
  )

  // TM accepting L = { w \in {a, b, c}* | N_a(w) = N_b(w) = N_c(w) }
  def tm_eq_abc: TM = TM(
    states = Set(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19),
    symbols = Set('a','b','c'),
    tapeSymbols = Set('a','b','c','X','B'),
    trans = Map(
      (0, 'X') -> (0,'X',R),
      (0, 'a') -> (1,'X',R),
      (0, 'b') -> (2,'X',R),
      (0, 'c') -> (3,'X',R),
      (1, 'a') -> (1,'a',R),
      (1, 'X') -> (1,'X',R),
      (2, 'b') -> (2,'b',R),
      (2, 'X') -> (2,'X',R),
      (3, 'c') -> (3,'c',R),
      (3, 'X') -> (3,'X',R),
      (1, 'b') -> (4,'X',R),
      (1, 'c') -> (5,'X',R),
      (2, 'a') -> (6,'X',R),
      (2, 'c') -> (7,'X',R),
      (3, 'a') -> (8,'X',R),
      (3, 'b') -> (9,'X',R),
      (4, 'a') -> (4,'a',R),
      (4, 'b') -> (4,'b',R),
      (4, 'X') -> (4,'X',R),
      (5, 'a') -> (5,'a',R),
      (5, 'c') -> (5,'c',R),
      (5, 'X') -> (5,'X',R),
      (6, 'b') -> (6,'b',R),
      (6, 'a') -> (6,'a',R),
      (6, 'X') -> (6,'X',R),
      (7, 'b') -> (7,'b',R),
      (7, 'c') -> (7,'c',R),
      (7, 'X') -> (7,'X',R),
      (8, 'c') -> (8,'c',R),
      (8, 'a') -> (8,'a',R),
      (8, 'X') -> (8,'X',R),
      (9, 'c') -> (9,'c',R),
      (9, 'b') -> (9,'b',R),
      (9, 'X') -> (9,'X',R),
      (4, 'c') -> (10,'X',L),
      (5, 'b') -> (11,'X',L),
      (6, 'c') -> (12,'X',L),
      (7, 'a') -> (13,'X',L),
      (8, 'b') -> (14,'X',L),
      (9, 'a') -> (15,'X',L),
      (10, 'a') -> (10,'a',L),
      (10, 'b') -> (10,'b',L),
      (10, 'c') -> (10,'c',L),
      (10, 'X') -> (10,'X',L),
      (11, 'a') -> (11,'a',L),
      (11, 'b') -> (11,'b',L),
      (11, 'c') -> (11,'c',L),
      (11, 'X') -> (11,'X',L),
      (12, 'a') -> (12,'a',L),
      (12, 'b') -> (12,'b',L),
      (12, 'c') -> (12,'c',L),
      (12, 'X') -> (12,'X',L),
      (13, 'a') -> (13,'a',L),
      (13, 'b') -> (13,'b',L),
      (13, 'c') -> (13,'c',L),
      (13, 'X') -> (13,'X',L),
      (14, 'a') -> (14,'a',L),
      (14, 'b') -> (14,'b',L),
      (14, 'c') -> (14,'c',L),
      (14, 'X') -> (14,'X',L),
      (15, 'a') -> (15,'a',L),
      (15, 'b') -> (15,'b',L),
      (15, 'c') -> (15,'c',L),
      (15, 'X') -> (15,'X',L),
      (10, 'B') -> (16,'B',R),
      (11, 'B') -> (16,'B',R),
      (12, 'B') -> (16,'B',R),
      (13, 'B') -> (16,'B',R),
      (14, 'B') -> (16,'B',R),
      (15, 'B') -> (16,'B',R),
      (16, 'X') -> (16,'X',R),
      (16, 'a') -> (17,'a',L),
      (16, 'b') -> (17,'b',L),
      (16, 'c') -> (17,'c',L),
      (17, 'X') -> (17,'X',L),
      (17, 'B') -> (0,'B',R),
      (16, 'B') -> (18,'B',L),
      (18, 'X') -> (18,'X',L),
      (18, 'B') -> (19,'B',R),
    ),
    initState = 0,
    blank = 'B',
    finalStates = Set(19),
  )

  // TM for a function f(w ∈ {0, 1}*) = w' where w' = w - 1 if w starts with 1,
  // otherwise f(w) is not defined
  def tm_dec: TM = TM(
    states = Set(0,1,2,3,4,5,6,7,8,9,10,11,12,13),
    symbols = Set('0','1'),
    tapeSymbols = Set('0','1','B'),
    trans = Map(
      (0, '1') -> (1,'1',R),
      (1, '0') -> (1,'0',R),
      (1, '1') -> (1,'1',R),
      (1, 'B') -> (2,'B',L),
      (2, '0') -> (2,'0',L),
      (2, '1') -> (3,'0',R),
      (3, '0') -> (3,'1',R),
      (3, 'B') -> (4,'B',L),
      (4, '0') -> (4,'0',L),
      (4, '1') -> (4,'1',L),
      (4, 'B') -> (5,'B',R),
      (5, '1') -> (6,'1',L),
      (6, 'B') -> (7,'B',R),
      (5, '0') -> (8,'B',R),
      (8, '1') -> (9,'1',L),
      (9, 'B') -> (10,'B',R),
      (8, 'B') -> (11,'B',L),
      (11, 'B') -> (12,'0',L),
      (12, 'B') -> (13,'B',R)
    ),
    initState = 0,
    blank = 'B',
    finalStates = Set(7,10,13),
  )

  // TM for a function f(x+y) = z where x,y ∈ {0, 1}* start with 1 and z = x + y
  def tm_add: TM = TM(
    states = Set(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25),
    symbols = Set('0','1'),
    tapeSymbols = Set('0','1','X','Y','Z','+','B'),
    trans = Map(
      (0, '1') -> (1,'1',R),
      (1, '0') -> (1,'0',R),
      (1, '1') -> (1,'1',R),
      (1, '+') -> (2,'+',R),
      (2, '1') -> (3,'1',R),
      (3, '0') -> (3,'0',R),
      (3, '1') -> (3,'1',R),
      (3, 'B') -> (4,'B',L),
      (4, '1') -> (5,'Z',L),
      (5, '0') -> (5,'0',L),
      (5, '1') -> (5,'1',L),
      (5, '+') -> (5,'+',L),
      (5, 'X') -> (5,'X',L),
      (5, 'Y') -> (5,'Y',L),
      (5, 'B') -> (6,'B',R),
      (6, '0') -> (7,'0',R),
      (6, '1') -> (7,'1',R),
      (7, '0') -> (7,'0',R),
      (7, '1') -> (7,'1',R),
      (7, '+') -> (8,'+',L),
      (7, 'X') -> (8,'X',L),
      (7, 'Y') -> (8,'Y',L),
      (8, '1') -> (8,'0',L),
      (8, '0') -> (9,'1',L),
      (8, 'B') -> (9,'1',L),
      (9, '0') -> (9,'0',L),
      (9, '1') -> (9,'1',L),
      (9, 'B') -> (11,'B',R),
      (4, '0') -> (10,'Z',L),
      (10, '0') -> (10,'0',L),
      (10, '1') -> (10,'1',L),
      (10, '+') -> (10,'+',L),
      (10, 'X') -> (10,'X',L),
      (10, 'Y') -> (10,'Y',L),
      (10, 'B') -> (11,'B',R),
      (11, '0') -> (12,'0',R),
      (11, '1') -> (12,'1',R),
      (12, '0') -> (12,'0',R),
      (12, '1') -> (12,'1',R),
      (12, '+') -> (13,'+',L),
      (12, 'X') -> (13,'X',L),
      (12, 'Y') -> (13,'Y',L),
      (13, '0') -> (14,'Y',L),
      (13, '1') -> (14,'X',L),
      (14, 'B') -> (15,'0',R),
      (14, '0') -> (15,'0',R),
      (14, '1') -> (15,'1',R),
      (15, 'X') -> (15,'X',R),
      (15, 'Y') -> (15,'Y',R),
      (15, '+') -> (16,'+',R),
      (16, '0') -> (17,'0',R),
      (16, '1') -> (17,'1',R),
      (17, '0') -> (17,'0',R),
      (17, '1') -> (17,'1',R),
      (17, 'Z') -> (4,'Z',L),
      (16, 'Z') -> (18,'Z',L),
      (18, '+') -> (19,'+',L),
      (19, 'X') -> (19,'X',L),
      (19, 'Y') -> (19,'Y',L),
      (19, '0') -> (19,'0',L),
      (19, '1') -> (19,'1',L),
      (19, 'B') -> (20,'B',R),
      (20, 'X') -> (21,'1',R),
      (20, 'Y') -> (21,'0',R),
      (20, '1') -> (21,'1',R),
      (20, '0') -> (21,'B',R),
      (21, 'X') -> (21,'1',R),
      (21, 'Y') -> (21,'0',R),
      (21, '0') -> (21,'0',R),
      (21, '1') -> (21,'1',R),
      (21, '+') -> (22,'B',R),
      (22, 'Z') -> (22,'B',R),
      (22, 'B') -> (23,'B',L),
      (23, 'B') -> (23,'B',L),
      (23, '1') -> (24,'1',L),
      (23, '0') -> (24,'0',L),
      (24, '0') -> (24,'0',L),
      (24, '1') -> (24,'1',L),
      (24, 'B') -> (25,'B',R),
    ),
    initState = 0,
    blank = 'B',
    finalStates = Set(25),
  )

}
